@startuml
|NotificationPreferences|
|UserProfile|
|LoginView|
start
:Receive registration button click;
:readUsernameTextbox();
:readPasswordTextbox();
:readEmailTextbox();
:readNotificationPreferences();
:Create NotificationPreferences object;
|NotificationPreferences|
:NotificationPreferences(frequency: NotificationFrequency, isEnabled: bool);
|LoginView|
:Create UserProfile object;
|UserProfile|
:UserProfile(username: string, email: string, notificationPreferences: NotificationPreferences);

|LoginView|

:registerUser(userProfile: UserProfile, password: string);

|AuthenticationManager|
:validateUsername(username: string);
if (username is invalid) then (yes)
|LoginView|
    :displayError("Username must use only letters");
    stop
else (no)
endif
|AuthenticationManager|

:validatePassword(password: string);
if (password is invalid) then (yes)
|LoginView|
    :displayError("Password must be at least 8 characters long");
    stop
else (no)
endif
|AuthenticationManager|

:validateEmail(email: string);
if (email is invalid) then (yes)
|LoginView|
    :displayError("Invalid email address");
    stop
else (no)
endif
|AuthenticationManager|

:hashPassword(password: string);

|UserStorageManager|
:findUserByUsername(username: string);
if (user found) then (yes)
|AuthenticationManager|
    :Return RegistrationStatus.USER_ALREADY_EXISTS;
|LoginView|
    :displayError("Username already exists");
    stop
else (no)
endif

|UserStorageManager|
:saveUserToDatabase(userProfile: UserProfile, hashedPassword: string);

if (save successful) then (yes)
    |AuthenticationManager|
    :Return RegistrationStatus.SUCCESS;
    |LoginView|
    :transitionToHomeView(userProfile: UserProfile);
    stop
else (no)
    |AuthenticationManager|
    :Return RegistrationStatus.UNKNOWN_ERROR;
    |LoginView|
    :displayError("Registration failed. Internal error");
    stop
endif
@enduml